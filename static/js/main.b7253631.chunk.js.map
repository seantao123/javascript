{"version":3,"sources":["logo.svg","Model/weatherModel.js","ViewModel/weatherViewModel.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","baseUrl","WeatherModel","cityName","fetch","encodeURIComponent","data","json","locations","length","woeid","toString","WeatherContext","createContext","WeatherViewModel","props","useState","weatherItems","setWeatherItems","useEffect","cityNames","a","items","getTemperature","item","name","temp","consolidated_weather","the_temp","icon","weather_state_abbr","loadModel","Provider","value","children","App","useContext","className","src","logo","alt","width","height","map","index","Paper","key","style","marginTop","Typography","variant","component","Math","round","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"sFAAAA,EAAOC,QAAU,IAA0B,kC,0PCArCC,EAGF,sCAEiBC,E,qJACWC,G,2FACPC,MAAMH,EAAU,8BAAgCI,mBAAmBF,I,cAAhFG,E,gBACkBA,EAAKC,O,aAAvBC,E,QACUC,OAAS,G,iCACFL,MAAMH,EAAU,gBAAkBO,EAAU,GAAGE,MAAMC,Y,cAAlEL,E,iBACSA,EAAKC,O,mJCRjBK,EAAiBC,0BAEjBC,EAAmB,SAACC,GAAW,IAAD,EACCC,mBAAS,IADV,mBAChCC,EADgC,KAClBC,EADkB,KAgBvC,OAbAC,qBAAU,WACN,IAAMC,EAAY,CAAC,WAAY,gBAAiB,eACjC,uCAAG,oCAAAC,EAAA,sDACVC,EAAQ,GADE,cAESF,GAFT,gEAEHjB,EAFG,iBAGOD,EAAaqB,eAAepB,GAHnC,OAGNqB,EAHM,OAIVF,EAAK,CAAI,CAAEG,KAAMtB,EAAUuB,KAAMF,EAAKG,qBAAqB,GAAGC,SAAUC,KAAML,EAAKG,qBAAqB,GAAGG,qBAAtG,mBAA8HR,IAJzH,+IAMdJ,EAAgBI,GANF,gEAAH,qDAQfS,KACD,IAGC,kBAACnB,EAAeoB,SAAhB,CAAyBC,MAAOhB,GAC3BF,EAAMmB,W,gBCYJC,MA3Bf,WACE,IAAMlB,EAAemB,qBAAWxB,GAGhC,OACE,yBAAKyB,UAAU,OACb,4BAAQA,UAAU,cAChB,yBAAKC,IAAKC,IAAMF,UAAU,WAAWG,IAAI,OAAOC,MAAM,MAAMC,OAAO,QAGjEzB,EAAa0B,KAAI,SAACnB,EAAMoB,GAAP,OACf,kBAACC,EAAA,EAAD,CAAOC,IAAKF,EAAOG,MAAO,CAACN,MAAO,QAASO,UAAW,SACpD,kBAACC,EAAA,EAAD,CAAYC,QAAQ,KAAKC,UAAU,MAChC3B,EAAKC,MAER,kBAACwB,EAAA,EAAD,CAAYE,UAAU,KACnBC,KAAKC,MAAM7B,EAAKE,MAAMf,WAAa,UAEtC,yBAAK2B,IAAK,yDAA2Dd,EAAKK,KAAO,OAAQY,MAAM,KAAKC,OAAO,cCdrGY,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,KAEE,kBAAC,EAAD,QAGJC,SAASC,eAAe,SDqHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.b7253631.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","const baseUrl = \n    //\"https://cors-anywhere.herokuapp.com/https://www.metaweather.com/\";\n    //\"https://www.metaweather.com/\";\n    \"https://whaleweather.herokuapp.com/\";\n\nexport default class WeatherModel {\n    static async getTemperature(cityName) {\n        let data = await fetch(baseUrl + \"api/location/search/?query=\" + encodeURIComponent(cityName));\n        let locations = await data.json();\n        if (locations.length > 0) {\n            let data = await fetch(baseUrl + \"api/location/\" + locations[0].woeid.toString());\n            return await data.json(); \n        }\n    }\n}","import React, { useState, createContext, useEffect } from \"react\";\nimport WeatherModel from \"../Model/weatherModel\";\n\nexport const WeatherContext = createContext();\n\nexport const WeatherViewModel = (props) => {\n    const [weatherItems, setWeatherItems] = useState([]);\n\n    useEffect(() => {\n        const cityNames = [\"san jose\", \"san francisco\", \"sacramento\"];\n        const loadModel = async () => {\n            let items = [];\n            for (const cityName of cityNames) {\n                let item = await WeatherModel.getTemperature(cityName);\n                items = [{ name: cityName, temp: item.consolidated_weather[0].the_temp, icon: item.consolidated_weather[0].weather_state_abbr}, ...items];\n            }\n            setWeatherItems(items);\n        }\n        loadModel();\n    }, []);\n\n    return (\n        <WeatherContext.Provider value={weatherItems}>\n            {props.children}\n        </WeatherContext.Provider>\n    );\n}","import React, { useContext } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport { WeatherContext } from \"./ViewModel/weatherViewModel\";\nimport { withStyles } from '@material-ui/core/styles';\nimport Paper from '@material-ui/core/Paper';\nimport Typography from '@material-ui/core/Typography';\n\nfunction App() {\n  const weatherItems = useContext(WeatherContext);\n  // @Published var weatherItems = [CityWeather]()\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" width=\"200\" height=\"200\" />\n        {/* List(viewModel.weatherItems) { item in */}\n        {\n          weatherItems.map((item, index) =>\n            <Paper key={index} style={{width: \"200px\", marginTop: \"20px\"}}>\n              <Typography variant=\"h5\" component=\"h3\">\n                {item.name}\n              </Typography>\n              <Typography component=\"p\">\n                {Math.round(item.temp).toString() + \"â„ƒ\"}\n              </Typography>\n              <img src={\"https://www.metaweather.com/static/img/weather/png/64/\" + item.icon + \".png\"} width=\"32\" height=\"32\"/>\n            </Paper>\n          )\n        }\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { WeatherViewModel } from \"./ViewModel/weatherViewModel\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <WeatherViewModel>\n      {/*  @ObservedObject var viewModel = WeatherViewModel() */}\n      <App />\n    </WeatherViewModel>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}